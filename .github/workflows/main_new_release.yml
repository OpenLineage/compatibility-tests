name: Daily Build

on: push

# actual trigger for daily run of workflow
#on:
#  schedule:
#    - cron: "0 3 * * *"

permissions:
  id-token: write
  contents: write
  pull-requests: write
  issues: write

jobs:
  initialize_workflow:
    runs-on: ubuntu-latest
    outputs:
      run_dataplex: 'true'
      run_spark_dataproc: 'true'
      openlineage_release: ${{ steps.select-components.outputs.ol_release }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

        # there should be part about checking not only the OL version but also the producers and consumers
        # there is no way to check for new releases of spark_dataproc or dataplex so we just run their tests everytime
        # also normally new release of OL should trigger all producer tests but for now they are run anyway so no need to trigger
      - name: Select components to run
        id: select-components
        run: |
          # assuming the version will not exceed 1000 this is the quickest way to get comparable values
          version_sum() {
            IFS='.' read -r var1 var2 var3 <<< "$1"
            echo $(( var1 * 1000000 + var2 * 1000 ))
          }
          
          current_ol=$(cat generated-files/releases.json | jq -c '.[] | select(.name | contains("openlineage")) | .latest_version ' -r)
          latest_ol=$(curl https://api.github.com/repos/OpenLineage/OpenLineage/releases/latest -s | jq .tag_name -r)

          sum1=$(version_sum "$latest_ol")
          sum2=$(version_sum "$current_ol")
          
          if (( $(version_sum $latest_ol) > $(version_sum $current_ol) )); then
              echo "ol_release=${latest_ol}" >> $GITHUB_OUTPUT
          else
              echo "ol_release=${current_ol}" >> $GITHUB_OUTPUT  
          fi          

  ######## COMPONENT VALIDATION ########

  dataplex:
    needs: initialize_workflow
    if: ${{ needs.initialize_workflow.outputs.run_dataplex == 'true' }}
    uses: ./.github/workflows/consumer_dataplex.yml
    secrets:
      gcpKey: ${{ secrets.GCP_SA_KEY }}

  spark-dataproc:
    needs: initialize_workflow
    if: ${{ needs.initialize_workflow.outputs.run_spark_dataproc == 'true' }}
    uses: ./.github/workflows/producer_spark_dataproc.yml
    secrets:
      gcpKey: ${{ secrets.GCP_SA_KEY }}
    with:
      release: ${{ needs.initialize_workflow.outputs.openlineage_release }}
      get-circleci-artifacts: false

  ######## COLLECTION OF REPORTS AND EXECUTE APPROPRIATE ACTIONS ########

  collect-and-compare-reports:
    needs:
      - initialize_workflow
      - dataplex
      - spark-dataproc
    if: ${{ !failure() }}
    uses: ./.github/workflows/collect_and_compare_reports.yml
    secrets:
      gcpKey: ${{ secrets.GCP_SA_KEY }}

#  notify-maintainers:
#    needs: collect-and-compare-reports
#    uses: ./.github/workflows/notify_maintainers.yml
#
#  update-repo-files:
#    needs:
#      - initialize_workflow
#      - notify-maintainers
#    uses: ./.github/workflows/update_repo_files.yml